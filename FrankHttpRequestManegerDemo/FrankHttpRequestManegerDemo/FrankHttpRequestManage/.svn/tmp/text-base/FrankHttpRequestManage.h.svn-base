//
//  FrankHttpRequestManage.h
//  FrankAFNetWorking
//
//  Created by 武玉宝 on 16/1/24.
//  Copyright © 2016年 Frank. All rights reserved.
//


/**
 *  网络请求封装
 */

#import <Foundation/Foundation.h>
#import <UIKit/UIKit.h>
#import <AFNetworking.h>
#import <AFNetworking/AFURLSessionManager.h>
#import "MBProgressHUD.h"
#import "SinglecaseClass.h"

typedef void (^RequestPrepare)();
typedef void (^RequestFinally)();
typedef void (^ReplySucess)(NSURLSessionDataTask *task, id responseObject, NSDictionary* requestParams);
typedef void (^ReplyFailure)(NSURLSessionDataTask *task, id responseObject, NSDictionary* requestParams ,BOOL isNeedLogin);
typedef void (^ReplyError)(NSError *error, NSURLSessionDataTask *task, NSDictionary* requestParams);


typedef void (^MultipartData)(id <AFMultipartFormData> formData);


@interface FrankHttpRequestManage : NSObject

DEFINE_SINGLETON_FOR_HEADER(FrankHttpRequestManage)

/**
 *  请求之前的准备，可直接调用本类对象的 prepare
 */
@property (nonatomic,copy) RequestPrepare prepare;

/**
 *  一个网络请求返回后做清理。
 */
@property (nonatomic,copy) RequestFinally finally;
/**
 *  网络请求返回成功
 */
@property (nonatomic, copy) ReplySucess sucess;

/**
 *  失败
 */
@property (nonatomic, copy) ReplyFailure failure;
/**
 *  请求出错
 */
@property (nonatomic, copy) ReplyError error;


+ (NSString *)encodeUrl:(NSString *)url;

/**
 *  开始菊花转动
 */
-(void)startHUD;

/**
 *  停止菊花转动
 */
-(void)stopHUD;

/**
 *  GET请求
 *
 *  @param URLString    请求URLString
 *  @param headerParams 请求头添加的参数
 *  @param params       请求参数
 *  @param prepare      请求前的准备（直接调用）
 *  @param finally      请求结束，进行清理（直接调用）
 *  @param sucess       请求成功，数据正常
 *  @param failure      请求失败
 *  @param error      请求连接错误
 */
+ (void)httpRequestGETWithURLString:(NSString*)     URLString
                       headerParams:(NSDictionary *)headerParams
                             params:(NSDictionary*) params
                            prepare:(RequestPrepare)  prepare
                            finally:(RequestFinally)  finally
                             sucess:(ReplySucess)   sucess
                            failure:(ReplyFailure)  failure
                              error:(ReplyError)netError;

/**
 *  POST请求
 *
 *  @param URLString    请求URLString
 *  @param headerParams 请求头添加的参数
 *  @param params       请求参数
 *  @param prepare      请求前的准备（直接调用）
 *  @param finally      请求结束，进行清理（直接调用）
 *  @param sucess       请求成功，数据正常
 *  @param failure      请求失败
 *  @param error      请求连接错误
 */
+ (void)httpRequestPOSTWithURLStr:(NSString*)     URLString
                     headerParams:(NSDictionary *)headerParams
                           params:(NSDictionary*) params
                          prepare:(RequestPrepare)  prepare
                          finally:(RequestFinally)  finally
                           sucess:(ReplySucess)   sucess
                          failure:(ReplyFailure)  failure
                            error:(ReplyError)netError;



/**
 *  POST请求（请求体中包含NSData参数）
 *
 *  @param URLString    请求URLString
 *  @param headerParams 请求头添加的参数
 *  @param params       请求参数
 *  @param multipartData 需要向请求体中添加的一些NSData数据类型参数
 *  @param prepare      请求前的准备（直接调用）
 *  @param finally      请求结束，进行清理（直接调用）
 *  @param sucess       请求成功，数据正常
 *  @param failure      请求失败
 *  @param error      请求连接错误
 */
+ (void)httpRequestPOSTWith:(NSString*) URLString
               headerParams:(NSDictionary *)headerParams
                     params:(NSDictionary*) params
  constructingBodyWithBlock:(MultipartData) multipartData
                    prepare:(RequestPrepare)  prepare
                    finally:(RequestFinally)  finally
                     sucess:(ReplySucess)   sucess
                    failure:(ReplyFailure)  failure
                      error:(ReplyError)netError;


+ (void)httpRequestHEADWith:(NSString*) URLString
                     params:(NSDictionary*) params
                    prepare:(RequestPrepare)  prepare
                    finally:(RequestFinally)  finally
                     sucess:(ReplySucess)   success
                      error:(ReplyError)netError;




/**
 *  判断当前返回的数据，结合后台的错误信息，判断当前请求的数据是否成功
 *
 *  @param responseObject 返回数据
 *
 *  @return YES 表示数据正确，NO 表示后台的错误提示，证明返回有误
 */
+ (BOOL)judgeResponeSucessOrFail:(id)responseObject;

//- (BOOL)networkReturnSucess:(id)responseObject params:(NSDictionary *)params;
//- (NSString*)messageFromResponse:(id)responseObject;
//- (instancetype)initParentView:(UIView*)parentView contorller:(UIViewController *)contorller https:(BOOL)bHttps;



/*
 *
 *  用于指定网络请求接口的基础url，如：
 *  http://henishuo.com或者http://101.200.209.244
 *  通常在AppDelegate中启动时就设置一次就可以了。如果接口有来源
 *  于多个服务器，可以调用更新
 *
 *  @param baseUrl 网络接口的基础url
 */
+ (void)updateBaseUrl:(NSString *)baseUrl;

/*
 *  对外公开可获取当前所设置的网络接口基础url
 *
 *  @return 当前基础url
 */
+ (NSString *)baseUrl;


/*
 *
 *  开启或关闭是否自动将URL使用UTF8编码，用于处理链接中有中文时无法请求的问题
 *
 *  @param shouldAutoEncode YES or NO,默认为NO
 */
+ (void)shouldAutoEncodeUrl:(BOOL)shouldAutoEncode;

///*
// *
// *  图片上传接口，若不指定baseurl，可传完整的url
// *
// *  @param image    图片对象
// *  @param url      上传图片的接口路径，如/path/images/
// *  @param filename 给图片起一个名字，默认为当前日期时间,格式为"yyyyMMddHHmmss"，后缀为`jpg`
// *  @param name     与指定的图片相关联的名称，这是由后端写接口的人指定的，如imagefiles
// *  @param success  上传成功的回调
// *  @param fail     上传失败的回调
// *
// *  @return 返回类型有取消请求的api
// */
//+ (void)httpRequestUploadImage:(UIImage *)image
//                           url:(NSString *)url
//                       prepare:(RequestPrepare)  prepare
//                      filename:(NSString *)filename
//                          name:(NSString *)name
//                        params:(NSDictionary*) params
//                       finally:(RequestFinally)  finally
//                        sucess:(ReplySucess)   sucess
//                         error:(ReplyError)    netError;
//
//
///*
// *
// *  上传进度
// *
// *  @param bytesWritten              已上传的大小
// *  @param totalBytesWritten         总上传大小
// *  @param totalBytesExpectedToWrite 还有多少需要上传
// */
//typedef void (^FrankUploadProgress)(NSUInteger bytesWritten,
//                                  long long totalBytesWritten,
//                                  long long totalBytesExpectedToWrite);
//
///*
// *
// *  图片上传接口，若不指定baseurl，可传完整的url
// *
// *  @param image    图片对象
// *  @param url      上传图片的接口路径，如/path/images/
// *  @param filename 给图片起一个名字，默认为当前日期时间,格式为"yyyyMMddHHmmss"，后缀为`jpg`
// *  @param name     与指定的图片相关联的名称，这是由后端写接口的人指定的，如imagefiles
// *  @param progress 上传进度
// *  @param success  上传成功的回调
// *  @param fail     上传失败的回调
// *
// *  @return 返回类型有取消请求的api
// */
//+ (void)uploadWithImage:(UIImage *)image
//                    url:(NSString *)url
//               filename:(NSString *)filename
//                   name:(NSString *)name
//               progress:(FrankUploadProgress)progress
//                 params:(NSDictionary*) params
//                finally:(RequestFinally)  finally
//                 sucess:(ReplySucess)   sucess
//                  error:(ReplyError)    networkError;
//
//+ (void)uploadWithImage:(UIImage *)image
//                    url:(NSString *)url
//               filename:(NSString *)filename
//                   name:(NSString *)name
//             parameters:(NSDictionary *)parameters
//               progress:(FrankUploadProgress)progress
//                finally:(RequestFinally)  finally
//                 sucess:(ReplySucess)   sucess
//                  error:(ReplyError)    networkError;
//
///*
// *
// *  下载进度
// *
// *  @param bytesRead                 已下载的大小
// *  @param totalBytesRead            文件总大小
// *  @param totalBytesExpectedToRead 还有多少需要下载
// */
//typedef void (^FrankDownloadProgress)(NSUInteger bytesRead,
//                                    long long totalBytesRead,
//                                    long long totalBytesExpectedToRead);
//
///*
// *  下载文件
// *
// *  @param url           下载URL
// *  @param saveToPath    下载到哪个路径下
// *  @param progressBlock 下载进度
// *  @param success       下载成功后的回调
// *  @param failure       下载失败后的回调
// */
//- (void)downloadWithUrl:(NSString *)url
//             saveToPath:(NSString *)saveToPath
//               progress:(FrankDownloadProgress)progressBlock
//                 sucess:(ReplySucess)   sucess
//                  error:(ReplyError)    networkError;




@end
